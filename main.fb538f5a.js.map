{"version":3,"sources":["scripts/main.js"],"names":["gameMatrix","score","MATRIX_COLUMNS","MATRIX_ROWS","WINNING_NUMBER","FIELD_ROWS","document","querySelectorAll","FIELD_CELLS","Array","from","map","row","MESSAGES","MESSAGE_AFTER_START","querySelector","MESSAGE_LOSE","MESSAGE_WIN","START_BUTTON","SCORE_NUMBER","startGame","updateFieldAppearance","innerText","classList","add","forEach","message","className","remove","addNewNumberToMatrix","makeMove","direction","originalMatrix","slideLeft","slideRight","slideUp","slideDown","areMatricesEqual","runAfterMoveTasks","isGameOver","length","col","num","newRandomNum","getRandomIncluding","emptyCells","r","c","push","randomEmptyCell","mergeRow","mergedRow","filter","cell","checkWin","matrix","currentRow","zeroesToAdd","resultRow","concat","fill","reversedRow","mergedRevercedBackRow","reverse","matrixRotated","matrixRotatedBack","rotateMatrixBack","rotateMatrix","min","max","Math","floor","random","hasEmptyCells","some","isMovePossible","currentElement","oldMatrix","newMatrix","addEventListener","e","key"],"mappings":"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","file":"main.fb538f5a.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n/* #region Variables */\nlet gameMatrix;\nlet score;\nconst MATRIX_COLUMNS = 4;\nconst MATRIX_ROWS = 4;\nconst WINNING_NUMBER = 2048;\nconst FIELD_ROWS = document.querySelectorAll('.field-row');\nconst FIELD_CELLS = Array.from(FIELD_ROWS)\n  .map(row => row.querySelectorAll('.field-cell'));\nconst MESSAGES = document.querySelectorAll('.message');\nconst MESSAGE_AFTER_START = document.querySelector('.message-afterstart');\nconst MESSAGE_LOSE = document.querySelector('.message-lose');\nconst MESSAGE_WIN = document.querySelector('.message-win');\nconst START_BUTTON = document.querySelector('.button');\nconst SCORE_NUMBER = document.querySelector('.game-score');\n/* #endregion */\n\n/* #region Main */\nSTART_BUTTON.addEventListener('click', startGame);\n\nfunction startGame() {\n  gameMatrix = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  updateFieldAppearance();\n  SCORE_NUMBER.innerText = `${score}`;\n  START_BUTTON.classList.add('restart');\n  START_BUTTON.innerText = 'Restart';\n\n  MESSAGES.forEach(message => {\n    if (message.className !== 'hidden') {\n      message.classList.add('hidden');\n    }\n  });\n  MESSAGE_AFTER_START.classList.remove('hidden');\n\n  addNewNumberToMatrix();\n  addNewNumberToMatrix();\n  updateFieldAppearance();\n}\n\ndocument.addEventListener('keyup', (e) => {\n  MESSAGE_AFTER_START.classList.add('hidden');\n  makeMove(e.key);\n});\n\nfunction makeMove(direction) {\n  const originalMatrix = gameMatrix.map(row => [...row]);\n\n  switch (direction) {\n    case 'ArrowLeft':\n      slideLeft(gameMatrix);\n      break;\n    case 'ArrowRight':\n      slideRight(gameMatrix);\n      break;\n    case 'ArrowUp':\n      slideUp(gameMatrix);\n      break;\n    case 'ArrowDown':\n      slideDown(gameMatrix);\n      break;\n    default:\n      break;\n  }\n\n  if (!areMatricesEqual(originalMatrix, gameMatrix)) {\n    runAfterMoveTasks();\n  }\n}\n\nfunction runAfterMoveTasks() {\n  addNewNumberToMatrix();\n  updateFieldAppearance();\n  SCORE_NUMBER.innerText = `${score}`;\n  isGameOver();\n}\n\nfunction updateFieldAppearance() {\n  for (let row = 0; row < gameMatrix.length; row++) {\n    for (let col = 0; col < gameMatrix[row].length; col++) {\n      const num = gameMatrix[row][col];\n\n      FIELD_CELLS[row][col].innerText = num === 0 ? '' : `${num}`;\n      FIELD_CELLS[row][col].className = 'field-cell';\n\n      if (num !== 0) {\n        FIELD_CELLS[row][col].classList.add(`field-cell--${num}`);\n      }\n    }\n  }\n}\n\nfunction addNewNumberToMatrix() {\n  const newRandomNum = getRandomIncluding(1, 10) === 10 ? 4 : 2;\n  const emptyCells = [];\n\n  for (let r = 0; r < gameMatrix.length; r++) {\n    for (let c = 0; c < gameMatrix[r].length; c++) {\n      if (gameMatrix[r][c] === 0) {\n        emptyCells.push({\n          row: r,\n          col: c,\n        });\n      }\n    }\n  }\n\n  const randomEmptyCell\n  = emptyCells[getRandomIncluding(0, emptyCells.length - 1)];\n\n  gameMatrix[randomEmptyCell.row][randomEmptyCell.col] = newRandomNum;\n\n  // isGameOver(gameMatrix);\n}\n/* #endregion */\n\n/* #region Slide functions */\nfunction mergeRow(row) {\n  let mergedRow = row.filter((num) => num !== 0);\n\n  for (let cell = 0; cell < mergedRow.length; cell++) {\n    if (mergedRow[cell] === mergedRow[cell + 1]) {\n      mergedRow[cell] = mergedRow[cell] * 2;\n      mergedRow[cell + 1] = 0;\n      score += mergedRow[cell];\n      checkWin(mergedRow[cell]);\n    }\n  }\n  mergedRow = mergedRow.filter((num) => num !== 0);\n\n  return mergedRow;\n}\n\nfunction slideLeft(matrix) {\n  for (let r = 0; r < matrix.length; r++) {\n    const currentRow = matrix[r];\n\n    if (currentRow.length > 0) {\n      const mergedRow = mergeRow(currentRow);\n      const zeroesToAdd = matrix[r].length - mergedRow.length;\n      const resultRow = mergedRow.concat(Array(zeroesToAdd).fill(0));\n\n      matrix[r] = resultRow;\n    }\n  }\n\n  return matrix;\n}\n\nfunction slideRight(matrix) {\n  for (let r = 0; r < matrix.length; r++) {\n    const currentRow = matrix[r];\n\n    if (currentRow.length > 0) {\n      const reversedRow = currentRow.reverse();\n      const mergedReversedRow = mergeRow(reversedRow);\n      const mergedRevercedBackRow = mergedReversedRow.reverse();\n      const zeroesToAdd = matrix[r].length - mergedRevercedBackRow.length;\n      const resultRow = Array(zeroesToAdd)\n        .fill(0)\n        .concat(mergedRevercedBackRow);\n\n      matrix[r] = resultRow;\n    }\n  }\n\n  return matrix;\n}\n\nfunction slideDown(matrix) {\n  const matrixRotated = rotateMatrix(matrix);\n  const matrixRotatedSlidedLeft = slideLeft(matrixRotated);\n  const matrixRotatedBack = rotateMatrixBack(matrixRotatedSlidedLeft);\n\n  gameMatrix = matrixRotatedBack;\n}\n\nfunction slideUp(matrix) {\n  const matrixRotated = rotateMatrix(matrix);\n  const matrixRotatedSlidedRight = slideRight(matrixRotated);\n  const matrixRotatedBack = rotateMatrixBack(matrixRotatedSlidedRight);\n\n  gameMatrix = matrixRotatedBack;\n}\n/* #endregion */\n\n/* #region Additional Functions */\nfunction getRandomIncluding(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction isGameOver() {\n  const hasEmptyCells = gameMatrix\n    .some(row => row\n      .some(cell => cell === 0));\n\n  if (hasEmptyCells || isMovePossible()) {\n    return false;\n  }\n\n  MESSAGE_LOSE.classList.remove('hidden');\n\n  return true;\n}\n\nfunction isMovePossible() {\n  for (let r = 0; r < gameMatrix.length; r++) {\n    for (let c = 0; c < gameMatrix[r].length - 1; c++) {\n      if (gameMatrix[r][c] === gameMatrix[r][c + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let r = 0; r < gameMatrix.length - 1; r++) {\n    for (let c = 0; c < gameMatrix[r].length; c++) {\n      if (gameMatrix[r][c] === gameMatrix[r + 1][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction checkWin(num) {\n  if (num === WINNING_NUMBER) {\n    MESSAGE_WIN.classList.remove('hidden');\n  }\n}\n\nfunction rotateMatrix(matrix) {\n  const matrixRotated = [...Array(MATRIX_COLUMNS)]\n    .map(() => Array(MATRIX_ROWS));\n\n  for (let row = 0; row < MATRIX_ROWS; row++) {\n    for (let cell = 0; cell < MATRIX_COLUMNS; cell++) {\n      const currentElement = matrix[row][cell];\n\n      matrixRotated[cell][MATRIX_ROWS - 1 - row] = currentElement;\n    }\n  }\n\n  return matrixRotated;\n}\n\nfunction rotateMatrixBack(matrix) {\n  const matrixRotated = [...Array(MATRIX_COLUMNS)]\n    .map(() => Array(MATRIX_ROWS));\n\n  for (let row = 0; row < MATRIX_ROWS; row++) {\n    for (let cell = 0; cell < MATRIX_COLUMNS; cell++) {\n      const currentElement = matrix[row][cell];\n\n      matrixRotated[MATRIX_COLUMNS - 1 - cell][row] = currentElement;\n    }\n  }\n\n  return matrixRotated;\n}\n\nfunction areMatricesEqual(oldMatrix, newMatrix) {\n  for (let r = 0; r < oldMatrix.length; r++) {\n    for (let c = 0; c < oldMatrix[r].length; c++) {\n      if (oldMatrix[r][c] !== newMatrix[r][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/* #endregion */\n"]}